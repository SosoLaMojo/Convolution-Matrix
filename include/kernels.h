#pragma once

#include<iostream>
#include<stdlib.h>

float kIdentity[] = {
	0.0f, 0.0f, 0.0f,
	0.0f, 1.0f, 0.0f,
	0.0f, 0.0f, 0.0f
};

float kBlur1[] = {
	0, 0, 1.0f/13, 0, 0,
	0, 1.0f /13, 1.0f / 13, 1.0f / 13, 0,
	1.0f / 13, 1.0f / 13, 1.0f / 13, 1.0f / 13, 1.0f / 13,
	0, 1.0f / 13, 1.0f / 13, 1.0f / 13, 0,
	0, 0, 1.0f / 13, 0, 0
};

float kBlur2[] = {
	0, 0, 0, 0, 0,
	0, 1.0f / 9, 1.0f/9, 1.0f/9, 0,
	0, 1.0f / 9, 1.0f/9, 1.0f/9, 0,
	0, 1.0f / 9, 1.0f/9, 1.0f/9, 0,
	0, 0, 0, 0, 0
};

float kMotionBlur[] = {
	1.0f/9, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1.0f / 9, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1.0f / 9, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1.0f / 9, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1.0f / 9, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1.0f / 9, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1.0f / 9, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1.0f / 9, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1.0f / 9
};

float kEdgesDetect[] = {
	0,  1, 0,
	1, -4, 1,
	0,  1, 0
};

float kEdgesEnhance[] = {
	 0, 0, 0,
	-1, 1, 0,
	 0, 0, 0
};

float kHorizontalEdges[] = {
	0, 0, -1, 0, 0,
	0, 0, -1, 0, 0,
	0, 0,  2, 0, 0,
	0, 0,  0, 0, 0,
	0, 0,  0, 0, 0
};

float kVerticalEdges[] = {
	0, 0, -1, 0, 0,
	0, 0, -1, 0, 0,
	0, 0,  4, 0, 0,
	0, 0, -1, 0, 0,
	0, 0, -1, 0, 0
};

float kAllEdges[] = {
	-1, -1, -1,
	-1,  8, -1,
	-1, -1, -1
};

float kSharpen[] = {
	 0, -1,  0,
	-1,  5, -1,
	 0, -1,  0
};

float kSuperSharpen[] = {
	-1, -1, -1,
	-1,  9, -1,
	-1, -1, -1
};

float kEmboss[] = {
	-2, -1, 0,
	-1,  1, 1,
	 0,  1, 2
};

float kBoxFilter[] = {
	1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361,
	1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361,
	1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361,
	1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361,
	1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361,
	1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361,
	1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361,
	1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361,
	1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361,
	1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361,
	1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361,
	1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361,
	1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361,
	1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361,
	1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361,
	1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361,
	1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361,
	1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361,
	1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361, 1.0f/361
};

float kGaussianBlur[] = {
	1.0f/273,  4.0f/273,  7.0f/273,  4.0f/273, 1.0f/273,
	4.0f/273, 16.0f/273, 26.0f/273, 16.0f/273, 4.0f/273,
	7.0f/273, 26.0f/273, 41.0f/273, 26.0f/273, 7.0f/273,
	4.0f/273, 16.0f/273, 26.0f/273, 16.0f/273, 4.0f/273,
	1.0f/273,  4.0f/273,  7.0f/273,  4.0f/273, 1.0f/273
};